import os
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# .env faylni yuklash
load_dotenv()

# TOKENni olish
TOKEN = os.getenv("TOKEN")

user_modes = {}

bot = telebot.TeleBot(TOKEN)
waiting_users = []
chat_pairs = {}
online_users = set()

# Start komandasi
@bot.message_handler(commands=["start"])
def start(message):
    markup = InlineKeyboardMarkup(row_width=1)
    dub = InlineKeyboardButton("‚ûï–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥‚ûï", callback_data="bir")
    btn_continue = InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å‚ù§Ô∏è", callback_data="danat")
    markup.add(dub, btn_continue)

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.first_name + "! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç! üé≠",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "bir")
def check_subscription(call):
    markup = InlineKeyboardMarkup(row_width=1)
    dub = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="nazat")

    markup.add(dub)

    bot.edit_message_text(
        """/find –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 /stop –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥
 /next –°–ª–µ–¥—É—é—â–∏–π 
 /online –ñ–∏–≤—ã–µ –ª—é–¥–∏""",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    
@bot.callback_query_handler(func=lambda call: call.data == "nazat")
def check_subscription(call):
    markup = InlineKeyboardMarkup(row_width=1)
    dub = InlineKeyboardButton("‚ûï–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥‚ûï", callback_data="bir")
    btn_continue = InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å‚ù§Ô∏è", callback_data="danat")

    markup.add(dub, btn_continue)

    bot.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é.",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    
@bot.message_handler(commands=['find'])
def find(message):
    user = message.from_user.id

    if user in chat_pairs:
        bot.reply_to(message, "‚ùóÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.")
        return

    if user in waiting_users:
        bot.reply_to(message, "‚è≥ –í—ã —É–∂–µ –∂–¥–µ—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞...")
        return

    if waiting_users:
        partner = waiting_users.pop(0)  
        if partner == user: 
            waiting_users.append(user)
            bot.reply_to(message, "‚è≥ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∂–¥–µ—Ç...")
            return

        chat_pairs[user] = partner
        chat_pairs[partner] = user

        bot.send_message(user, "üîó –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.send_message(partner, "üîó –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        waiting_users.append(user)
        bot.reply_to(message, "‚è≥ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∂–¥–µ—Ç...")

# STOP
@bot.message_handler(commands=['stop'])
def stop(message):
    user = message.from_user.id

    if user in chat_pairs:
        partner = chat_pairs[user]
        del chat_pairs[user]
        if partner in chat_pairs:
            del chat_pairs[partner]
            bot.send_message(partner, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.")
        bot.reply_to(message, "‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–µ—Å–µ–¥—É.")
    elif user in waiting_users:
        waiting_users.remove(user)
        bot.reply_to(message, "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        bot.reply_to(message, "‚ùóÔ∏è –í–∞—Å –Ω–µ—Ç –≤ —á–∞—Ç–µ.")

# NEXT
@bot.message_handler(commands=['next'])
def next_user(message):
    stop(message) 
    find(message)  

# ONLINE
@bot.message_handler(commands=['online'])
def online(message):
    pairs_count = len(chat_pairs) // 2
    waiting_count = len(waiting_users)
    bot.reply_to(
        message,
        f"üë• –û–Ω–ª–∞–π–Ω: {len(online_users)}\n"
        f"üí¨ –û–∂–∏–¥–∞—é—â–∏–π: {waiting_count}\n"
        f"üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã: {pairs_count}"
    )

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker'])
def relay_message(message):
    user = message.from_user.id
    if user not in chat_pairs:
        bot.reply_to(message, "‚ùóÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–Ω–∞—á–∏–Ω–∞—Ç—å")
        return

    partner = chat_pairs[user]
    try:
        bot.copy_message(chat_id=partner, from_chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
@bot.callback_query_handler(func=lambda call: call.data == "danat")
def check_subscription(call):
    markup = InlineKeyboardMarkup(row_width=1)
    dub = InlineKeyboardButton("‚ù§Ô∏è–îo–Ω–∞—Çüíñ", url="https://tirikchilik.uz/anilan")
    dub1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="nazat")

    markup.add(dub, dub1)

    bot.edit_message_text(
        "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à–∏—Ö –∞–¥–º–∏–Ω–æ–≤üíñ",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

bot.polling()
